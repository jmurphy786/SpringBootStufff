package integration;

import org.junit.Before;
import org.hamcrest.CoreMatchers.*;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import com.qa.springboot.MySpringBootApplication;
import com.qa.springboot.mySpringBootRepository.personRepository;
import com.qa.springboot.mySpringBootDatabaseApp.mySpringBootDataModel;



@RunWith(SpringRunner.class)
@SpringBootTest(classes = {MySpringBootApplication.class})
@AutoConfigureMockMvc	
public class IntegrationTest {
	
	@Autowired
	private MockMvc mvc;
	
	@Autowired
	private personRepository repository;

	@Before
	public void clearDB() {
		repository.deleteAll();
	}

	@Test
	public void findingAndRetrievingPersonFromDatabase() throws Exception{
		repository.save(new mySpringBootDataModel("Dale", "Salford", 2));
		mvc.perform(MockMvcRequestBuilders.get("/api/person").contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).
		andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)).andExpect(jsonpath("$[0].name".is("Dale")));
		
	}
}
		